{
  "zh-CN": {
      "common": {
          "getStart": "开始",
          "description": "描述",
          "learnMore": "了解更多",
          "coreFeatures": "核心特性",
          "connectivity": "连通",
          "scalability": "扩展",
          "controllability": "管控",
          "orchestration": "编排",
          "reusability": "复用",
          "ourUsers": "Our Users",
          "readMore": "阅读更多",
          "download":"下载",
          "releaseDate": "发布日期",
          "newFeatures":"新特性",
          "enhancement":"增强点",
          "bugFixs":"Bug修复",
          "changeLog":"详细变更"
      },
      "home": {
          "banner": {
              "slogan": "Linkis 构建了一层计算中间件，方便上层应用与底层数据引擎之间的连接、治理和编排。"
          },
          "introduce": {
              "title": "计算中间件概念",
              "before": "没有Linkis之前",
              "after": "有Linkis之后",
              "beforeText": "上层应用以紧耦合方式直连底层引擎，使得数据平台变成复杂的网状结构",
              "afterText": "通过计算中间件将应用层和引擎层解耦，以标准化可复用方式简化复杂的网状调用关系，降低数据平台复杂度"
          },
          "description": {
              "standardizedInterfaces":"标准接口",
              "computationGovernance":"计算治理",
              "paragraph1": "Linkis 在上层应用和底层引擎之间构建了一层计算中间件。通过使用Linkis 提供的REST/WebSocket/JDBC 等标准接口，上层应用可以方便地连接访问Spark, Presto, Flink 等底层引擎。",
              "paragraph2": "Linkis提供了强大的连通、复用、编排、扩展和治理管控能力，以标准化可复用的方式解决 OLAP、OLTP(实现中)、Streaming等不同类型引擎的计算治理问题。"
          },
          "core": {
              "connectivity": "简化运维环境；解耦上下层，底层变化透明化；打通用户资源和运行时环境，告别应用孤岛",
              "scalability": "分布式微服务架构体系，解决高并发、高可用、多租户等问题；基于EngineConn插件可快速对接新引擎",
              "controllability": "收敛引擎入口，统一身份验证、高危防控、审计记录;基于标签的多级精细化资源控制和回收能力",
              "orchestration": "基于Orchestrator 服务的混算、双活计算策略设计(实现中)",
              "reusability": "极大降低上层应用的后台代码量；可基于Linkis 快速高效打造数据平台工具套件"
          }
      }
  },
  "en": {
      "common": {
          "getStart": "Get Start",
          "description": "Description",
          "learnMore": "Learn More",
          "coreFeatures": "Core Features",
          "connectivity": "Connectivity",
          "scalability": "Scalability",
          "controllability": "Controllability",
          "orchestration": "Orchestration",
          "reusability": "Reusability",
          "ourUsers": "Our Users",
          "readMore": "Read More",
          "download":"Download",
          "releaseDate": "Release Date",
          "newFeatures":"New Features",
          "enhancement":"Enhancement",
          "bugFixs":"Bug Fixs",
          "changeLog":"Change Log"
      },
      "home": {
          "banner": {
              "slogan": "Linkis builds a computation middleware layer to facilitate connection, governance and orchestration between the upper applications and the underlying data engines."
          },
          "introduce": {
              "title": "Computation Middleware",
              "before": "Before",
              "after": "After",
              "beforeText": "Each upper application directly connects to and accesses various underlying engines in a tightly coupled way, which makes big data platform a complex network architecture.",
              "afterText": "Build a common layer of \"computation middleware\" between the numerous upper-layer applications and the countless underlying engines to resolve these complex connection problems in a standardized reusable way\n"
          },
          "description": {
              "standardizedInterfaces":"Standardized Interfaces",
              "computationGovernance":"Computation Governance",
              "paragraph1": "Linkis provides standardized interfaces (REST, JDBC, WebSocket etc.) to easily connect to various underlying engines (Spark, Presto, Flink, etc.), and acts as a proxy between the upper applications layer and underlying engines layer.",
              "paragraph2": "Linkis is able to facilitate the connectivity, governance and orchestration capabilities of different kind of engines like OLAP, OLTP (developing), Streaming, and handle all these \"computation governance\" affairs in a standardized reusable way."
          },
          "core": {
              "connectivity": "Simplify the operation environment; decouple the upper and lower layers, which make the upper layer insensitive when bottom layers changed",
              "scalability": "Distributed microservice architecture with great scalability and extensibility; quickly integrate with the new underlying engine",
              "controllability": "Converge engine entrance, unify identity verification, high-risk prevention and control, audit records; label-based multi-level refined resource control and recovery capabilities",
              "orchestration": "Computing strategy design based on active-active, mixed computing, transcation Orchestrator Service",
              "reusability": "Highly reduced the back-end development workload of upper-level applications development; Swiftly and efficiently build a data platform tool suite based on Linkis"
          }
      }
  }
}