"use strict";(self.webpackChunklinkis_web_apache=self.webpackChunklinkis_web_apache||[]).push([[35355],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),u=s(n),c=r,g=u["".concat(o,".").concat(c)]||u[c]||m[c]||l;return n?a.createElement(g,i(i({ref:t},d),{},{components:n})):a.createElement(g,i({ref:t},d))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=c;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[u]="string"==typeof e?e:r,i[1]=p;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},36001:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const l={title:"Generate SQL according to the data source",sidebar_position:.5},i=void 0,p={unversionedId:"feature/datasource-generate-sql",id:"version-1.4.0/feature/datasource-generate-sql",title:"Generate SQL according to the data source",description:"1. Background",source:"@site/versioned_docs/version-1.4.0/feature/datasource-generate-sql.md",sourceDirName:"feature",slug:"/feature/datasource-generate-sql",permalink:"/docs/latest/feature/datasource-generate-sql",draft:!1,editUrl:"https://github.com/apache/linkis-website/edit/dev/versioned_docs/version-1.4.0/feature/datasource-generate-sql.md",tags:[],version:"1.4.0",sidebarPosition:.5,frontMatter:{title:"Generate SQL according to the data source",sidebar_position:.5},sidebar:"tutorialSidebar",previous:{title:"Support spark ETL data synchronization",permalink:"/docs/latest/feature/spark-etl"},next:{title:"Description of other features",permalink:"/docs/latest/feature/other"}},o={},s=[{value:"1. Background",id:"1-background",level:2},{value:"2. Instructions for use",id:"2-instructions-for-use",level:2},{value:"generate SparkSQL",id:"generate-sparksql",level:3},{value:"Generate JdbcSQL",id:"generate-jdbcsql",level:3},{value:"3. Precautions",id:"3-precautions",level:2},{value:"4. Implementation principle",id:"4-implementation-principle",level:2},{value:"Generate SparkSQL implementation principle",id:"generate-sparksql-implementation-principle",level:3},{value:"Generate JdbcSQL implementation principle",id:"generate-jdbcsql-implementation-principle",level:3}],d={toc:s},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"1-background"},"1. Background"),(0,r.kt)("p",null,"Generate SparkSQL and JdbcSQL based on data source information, including DDL, DML, and DQL."),(0,r.kt)("h2",{id:"2-instructions-for-use"},"2. Instructions for use"),(0,r.kt)("h3",{id:"generate-sparksql"},"generate SparkSQL"),(0,r.kt)("p",null,"Interface address: /api/rest_j/v1/metadataQuery/getSparkSql"),(0,r.kt)("p",null,"Request method: GET"),(0,r.kt)("p",null,"Request data type: application/x-www-form-urlencoded"),(0,r.kt)("p",null,"Request parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Data type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"dataSourceName")),(0,r.kt)("td",{parentName:"tr",align:null},"data source name"),(0,r.kt)("td",{parentName:"tr",align:null},"is"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"system")),(0,r.kt)("td",{parentName:"tr",align:null},"system name"),(0,r.kt)("td",{parentName:"tr",align:null},"is"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"database")),(0,r.kt)("td",{parentName:"tr",align:null},"database name"),(0,r.kt)("td",{parentName:"tr",align:null},"is"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"table")),(0,r.kt)("td",{parentName:"tr",align:null},"table name"),(0,r.kt)("td",{parentName:"tr",align:null},"is"),(0,r.kt)("td",{parentName:"tr",align:null},"String")))),(0,r.kt)("p",null,"Example response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "method": null,\n    "status": 0,\n    "message": "OK",\n    "data": {\n        "sparkSql": {\n            "ddl": "CREATE TEMPORARY TABLE test USING org.apache.spark.sql.jdbc OPTIONS ( url \'jdbc:mysql://localhost:3306/test\', dbtable \'test\', user \'root\', password \'password\' )",\n            "dml": "INSERT INTO test SELECT * FROM ${resultTable}",\n            "dql": "SELECT id,name FROM test"\n        }\n    }\n}\n')),(0,r.kt)("p",null,"Currently supports jdbc, kafka, elasticsearch, mongo data source, you can register spark table according to SparkSQLDDL for query"),(0,r.kt)("h3",{id:"generate-jdbcsql"},"Generate JdbcSQL"),(0,r.kt)("p",null,"Interface address: /api/rest_j/v1/metadataQuery/getJdbcSql"),(0,r.kt)("p",null,"Request method: GET"),(0,r.kt)("p",null,"Request data type: application/x-www-form-urlencoded"),(0,r.kt)("p",null,"Request parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Data type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"dataSourceName")),(0,r.kt)("td",{parentName:"tr",align:null},"data source name"),(0,r.kt)("td",{parentName:"tr",align:null},"is"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"system")),(0,r.kt)("td",{parentName:"tr",align:null},"system name"),(0,r.kt)("td",{parentName:"tr",align:null},"is"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"database")),(0,r.kt)("td",{parentName:"tr",align:null},"database name"),(0,r.kt)("td",{parentName:"tr",align:null},"is"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"table")),(0,r.kt)("td",{parentName:"tr",align:null},"table name"),(0,r.kt)("td",{parentName:"tr",align:null},"is"),(0,r.kt)("td",{parentName:"tr",align:null},"String")))),(0,r.kt)("p",null,"Example response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "method": null,\n    "status": 0,\n    "message": "OK",\n    "data": {\n        "jdbcSql": {\n            "ddl": "CREATE TABLE `test` (\\n\\t `id` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT \'The column name is id\',\\n\\t `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT \'The column name is name\',\\n\\t PRIMARY KEY (`id`)\\n\\t) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci",\n            "dml": "INSERT INTO test SELECT * FROM ${resultTable}",\n            "dql": "SELECT id,name FROM test"\n        }\n    }\n}\n')),(0,r.kt)("p",null,"Currently supports JDBC data sources, such as: mysql, oracle, postgres, etc. JdbcSQLDDL can be used for front-end display."),(0,r.kt)("h2",{id:"3-precautions"},"3. Precautions"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"You need to register the data source first")),(0,r.kt)("h2",{id:"4-implementation-principle"},"4. Implementation principle"),(0,r.kt)("h3",{id:"generate-sparksql-implementation-principle"},"Generate SparkSQL implementation principle"),(0,r.kt)("p",null,"Define DDL_SQL_TEMPLATE to obtain data source information for replacement"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'  public static final String JDBC_DDL_SQL_TEMPLATE =\n        "CREATE TEMPORARY TABLE %s"\n        + "USING org.apache.spark.sql.jdbc"\n        + "OPTIONS ("\n        + "url \'%s\',"\n        + "dbtable \'%s\',"\n        + " user \'%s\',"\n        + "password \'%s\'"\n        + ")";\n')),(0,r.kt)("h3",{id:"generate-jdbcsql-implementation-principle"},"Generate JdbcSQL implementation principle"),(0,r.kt)("p",null,"Splicing DDL according to table schema information"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public String generateJdbcDdlSql(String database, String table) {\n    StringBuilder ddl = new StringBuilder();\n    ddl.append("CREATE TABLE ").append(String.format("%s.%s", database, table)).append(" (");\n\n    try {\n        List < MetaColumnInfo > columns = getColumns(database, table);\n        if (CollectionUtils. isNotEmpty(columns)) {\n            for (MetaColumnInfo column: columns) {\n                ddl.append("\\n\\t").append(column.getName()).append(" ").append(column.getType());\n                if (column. getLength() > 0) {\n                    ddl.append("(").append(column.getLength()).append(")");\n                }\n                if (!column. isNullable()) {\n                    ddl.append("NOT NULL");\n                }\n                ddl.append(",");\n            }\n            String primaryKeys =\n                columns. stream()\n                .filter(MetaColumnInfo::isPrimaryKey)\n                .map(MetaColumnInfo::getName)\n                .collect(Collectors.joining(", "));\n            if (StringUtils. isNotBlank(primaryKeys)) {\n                ddl.append(String.format("\\n\\tPRIMARY KEY (%s),", primaryKeys));\n            }\n            ddl. deleteCharAt(ddl. length() - 1);\n        }\n    } catch (Exception e) {\n        LOG.warn("Fail to get Sql columns(Failed to get the field list)");\n    }\n\n    ddl.append("\\n)");\n\n    return ddl. toString();\n}\n')),(0,r.kt)("p",null,"Some data sources support direct access to DDL"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"mysql")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SHOW CREATE TABLE 'table'\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"oracle")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT DBMS_METADATA.GET_DDL('TABLE', 'table', 'database') AS DDL FROM DUAL\n")))}m.isMDXComponent=!0}}]);