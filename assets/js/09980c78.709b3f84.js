"use strict";(self.webpackChunklinkis_web_apache=self.webpackChunklinkis_web_apache||[]).push([[37473],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),c=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(i.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),m=r,f=p["".concat(i,".").concat(m)]||p[m]||d[m]||o;return t?a.createElement(f,s(s({ref:n},u),{},{components:t})):a.createElement(f,s({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=m;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[p]="string"==typeof e?e:r,s[1]=l;for(var c=2;c<o;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},96200:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const o={title:"Supports spark etl",sidebar_position:.2},s=void 0,l={unversionedId:"feature/spark-etl",id:"feature/spark-etl",title:"Supports spark etl",description:"1. Background",source:"@site/docs/feature/spark-etl.md",sourceDirName:"feature",slug:"/feature/spark-etl",permalink:"/docs/1.4.0/feature/spark-etl",draft:!1,editUrl:"https://github.com/apache/linkis-website/edit/dev/docs/feature/spark-etl.md",tags:[],version:"current",sidebarPosition:.2,frontMatter:{title:"Supports spark etl",sidebar_position:.2},sidebar:"tutorialSidebar",previous:{title:"EngineConn no longer imports the dependencies of the underlying engine",permalink:"/docs/1.4.0/feature/remove-underlying-engine-depdency"},next:{title:"Extend linkis-storage add support OSS filesystem",permalink:"/docs/1.4.0/feature/storage-add-support-oss"}},i={},c=[{value:"1. Background",id:"1-background",level:2},{value:"2. Supported types",id:"2-supported-types",level:2},{value:"3. General configuration instructions",id:"3-general-configuration-instructions",level:2},{value:"4. Instructions for use",id:"4-instructions-for-use",level:2},{value:"jdbc",id:"jdbc",level:3},{value:"file",id:"file",level:3},{value:"delta",id:"delta",level:3},{value:"hudi",id:"hudi",level:3},{value:"kafka",id:"kafka",level:3},{value:"elasticsearch",id:"elasticsearch",level:3},{value:"mongo",id:"mongo",level:3}],u={toc:c},p="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"1-background"},"1. Background"),(0,r.kt)("p",null,"You can configure json for spark etl"),(0,r.kt)("h2",{id:"2-supported-types"},"2. Supported types"),(0,r.kt)("p",null,"Currently supported types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"jdbc\u3001file\u3001redis\u3001kafka\u3001elasticsearch\u3001mongo\u3001solr\u3001rocketmq\u3001datalake(hudi\u3001delta)\n")),(0,r.kt)("h2",{id:"3-general-configuration-instructions"},"3. General configuration instructions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"name: Data source name\ntype: Contain `source`\u3001`transformation`\u3001`sink`\uff0cCorresponding to input, transformation and output respectively\noptions: Configuration parameter\nsaveMode: Save mode, currently supported: `overwrite` and `append`\npath: File path\uff0cThe value can be: 'file://' or 'hdfs://'(default)\n'resultTable' needs to correspond to 'sourceTable'\n")),(0,r.kt)("h2",{id:"4-instructions-for-use"},"4. Instructions for use"),(0,r.kt)("p",null,"Common etl examples are as follows:"),(0,r.kt)("h3",{id:"jdbc"},"jdbc"),(0,r.kt)("p",null,"Configuration description"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"url: jdbc\u8fde\u63a5\u4fe1\u606f\nuser: User name\npassword: password\nquery: sql query statement\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "sources": [\n        {\n            "name": "jdbc",\n            "type": "source",\n            "config": {\n                "resultTable": "test1",\n                "url": "jdbc:mysql://127.0.0.1:3306/dip_linkis?characterEncoding=UTF-8",\n                "driver": "com.mysql.jdbc.Driver",\n                "user": "root",\n                "password": "123456",\n                "query": "select * from dip_linkis.linkis_ps_udf_baseinfo",\n                "options": {\n                }\n            }\n        }\n    ],\n    "transformations": [\n        {\n            "name": "sql",\n            "type": "transformation",\n            "config": {\n                "resultTable": "T1654611700631",\n                "sql": "select * from test1"\n            }\n        }\n    ],\n    "sinks": [\n        {\n            "name": "jdbc",\n            "type": "sink",\n            "config": {\n                "sourceTable": "T1654611700631",\n                "url": "jdbc:mysql://127.0.0.1:3306/dip_linkis?characterEncoding=UTF-8",\n                "driver": "com.mysql.jdbc.Driver",\n                "user": "root",\n                "password": "123456",\n                "targetTable": "linkis_ps_udf_baseinfo2",\n                "options": {\n                }\n            }\n        }\n    ]\n}\n')),(0,r.kt)("h3",{id:"file"},"file"),(0,r.kt)("p",null,"Configuration description"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"serializer: File format, can be 'csv', 'parquet', etc\ncolumnNames: Column name\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "sources": [\n        {\n            "name": "file",\n            "type": "source",\n            "config": {\n                "resultTable": "test2",\n                "path": "hdfs:///tmp/test_new_no_partition",\n                "serializer": "csv",\n                "columnNames": ["id", "create_user", "udf_name", "udf_type", "tree_id", "create_time", "update_time", "sys", "cluster_name", "is_expire", "is_shared"]\n            }\n        }\n    ],\n    "sinks": [\n        {\n            "name": "file",\n            "config": {\n                "sourceTable": "test2",\n                "path": "hdfs:///tmp/test_new",\n                "partitionBy": ["create_user"],\n                "saveMode": "overwrite",\n                "serializer": "csv"\n            }\n        }\n    ]\n}\n')),(0,r.kt)("h3",{id:"delta"},"delta"),(0,r.kt)("p",null,"Configuration description"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"tableFormat: `hudi` and `delta` are currently supported\n")),(0,r.kt)("p",null,"Data write"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "sources": [\n    {\n      "name": "file",\n      "type": "source",\n      "config": {\n        "resultTable": "T1654611700631",\n        "path": "file://{filePath}/etltest.dolphin",\n        "serializer": "csv",\n        "options": {\n          "header":"true",\n          "delimiter":";"\n        },\n        "columnNames": ["name", "age"]\n      }\n    }\n  ],\n  "sinks": [\n    {\n      "name": "datalake",\n      "config": {\n        "sourceTable": "T1654611700631",\n        "tableFormat": "delta",\n        "path": "file://{filePath}/delta",\n        "saveMode": "overwrite"\n      }\n    }\n  ]\n}\n')),(0,r.kt)("p",null,"Data read"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "sources": [\n    {\n      "name": "datalake",\n      "type": "source",\n      "config": {\n        "resultTable": "T1654611700631",\n        "tableFormat": "delta",\n        "path": "file://{filePath}/delta",\n      }\n    }\n  ],\n  "sinks": [\n    {\n      "name": "file",\n      "config": {\n        "sourceTable": "T1654611700631",\n        "path": "file://{filePath}/csv",\n        "saveMode": "overwrite",\n        "options": {\n          "header":"true"\n        },\n        "serializer": "csv"\n      }\n    }\n  ]\n}\n')),(0,r.kt)("h3",{id:"hudi"},"hudi"),(0,r.kt)("p",null,"Configuration description"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"tableFormat: `hudi` and `delta` are currently supported\n")),(0,r.kt)("p",null,"Data write"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "sources": [\n    {\n      "name": "file",\n      "type": "source",\n      "config": {\n        "resultTable": "T1654611700631",\n        "path": "file://{filePath}/etltest.dolphin",\n        "serializer": "csv",\n        "options": {\n          "header":"true",\n          "delimiter":";"\n        },\n        "columnNames": ["name", "age"]\n      }\n    }\n  ],\n  "transformations": [\n    {\n      "name": "sql",\n      "type": "transformation",\n      "config": {\n        "resultTable": "T111",\n        "sql": "select * from T1654611700631"\n      }\n    }\n  ],\n  "sinks": [\n    {\n      "name": "datalake",\n      "config": {\n        "sourceTable": "T1654611700631",\n        "tableFormat": "hudi",\n        "options": {\n          "hoodie.table.name":"huditest",\n          "hoodie.datasource.write.recordkey.field":"age",\n          "hoodie.datasource.write.precombine.field":"age"\n        },\n        "path": "file://{filePath}/hudi",\n        "saveMode": "append"\n      }\n    }\n  ]\n}\n')),(0,r.kt)("p",null,"Data read"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "sources": [\n    {\n      "name": "datalake",\n      "type": "source",\n      "config": {\n        "resultTable": "T1654611700631",\n        "tableFormat": "hudi",\n        "path": "file://{filePath}/hudi",\n      }\n    }\n  ],\n  "transformations": [\n    {\n      "name": "sql",\n      "type": "transformation",\n      "config": {\n        "resultTable": "T111",\n        "sql": "select * from T1654611700631"\n      }\n    }\n  ],\n  "sinks": [\n    {\n      "name": "file",\n      "config": {\n        "sourceTable": "T1654611700631",\n        "path": "file://{filePath}/csv",\n        "saveMode": "overwrite",\n        "options": {\n          "header":"true"\n        },\n        "serializer": "csv"\n      }\n    }\n  ]\n}\n')),(0,r.kt)("h3",{id:"kafka"},"kafka"),(0,r.kt)("p",null,"Configuration description"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"servers: kafka connection information\nmode: Currently `batch` and `stream` are supported\ntopic: Name of the kafka topic\n")),(0,r.kt)("p",null,"Data write"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "sources": [\n        {\n            "name": "file",\n            "type": "source",\n            "config": {\n                "resultTable": "T1654611700631",\n                "path": "file://{filePath}/etltest.dolphin",\n                "serializer": "csv",\n                "options": {\n                "header":"true",\n                "delimiter":";"\n                },\n                "columnNames": ["name", "age"]\n            }\n        }\n    ],\n    "sinks": [\n        {\n            "name": "kafka",\n            "config": {\n                "sourceTable": "T1654611700631",\n                "servers": "localhost:9092",\n                "mode": "batch",\n                "topic": "test121212"\n            }\n        }\n    ]\n}\n')),(0,r.kt)("p",null,"Data read"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "sources": [\n        {\n            "name": "kafka",\n            "type": "source",\n            "config": {\n                "resultTable": "T1654611700631",\n                "servers": "localhost:9092",\n                "topic": "test121212"\n            }\n        }\n    ],\n    "sinks": [\n        {\n            "name": "kafka",\n            "config": {\n                "sourceTable": "T1654611700631",\n                "servers": "localhost:9092",\n                "mode": "stream",\n                "topic": "test55555"\n            }\n        }\n    ]\n}\n')),(0,r.kt)("h3",{id:"elasticsearch"},"elasticsearch"),(0,r.kt)("p",null,"Configuration description"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"node: elasticsearch ip\nport: elasticsearch port\nindex: elasticsearch index name\n")),(0,r.kt)("p",null,"Data write"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "sources": [\n        {\n            "name": "file",\n            "type": "source",\n            "config": {\n                "resultTable": "T1654611700631",\n                "path": "file://{filePath}/etltest.dolphin",\n                "serializer": "csv",\n                "options": {\n                "header":"true",\n                "delimiter":";"\n                },\n                "columnNames": ["name", "age"]\n            }\n        }\n    ],\n    "sinks": [\n        {\n            "name": "elasticsearch",\n            "config": {\n                "sourceTable": "T1654611700631",\n                "node": "localhost",\n                "port": "9200",\n                "index": "estest",\n                "saveMode": "overwrite"\n            }\n        }\n    ]\n}\n')),(0,r.kt)("p",null,"Data read"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "sources": [\n        {\n            "name": "elasticsearch",\n            "type": "source",\n            "config": {\n                "resultTable": "T1654611700631",\n                "node": "localhost",\n                "port": "9200",\n                "index": "estest"\n            }\n        }\n    ],\n    "sinks": [\n        {\n            "name": "file",\n            "config": {\n                "sourceTable": "T1654611700631",\n                "path": "file://{filePath}/csv",\n                "saveMode": "overwrite",\n                "serializer": "csv"\n            }\n        }\n    ]\n}\n')),(0,r.kt)("h3",{id:"mongo"},"mongo"),(0,r.kt)("p",null,"Configuration description"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"uri: mongo connection information\ndatabase: mongo database\ncollection: mongo collection\n")),(0,r.kt)("p",null,"Data write"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "sources": [\n        {\n            "name": "file",\n            "type": "source",\n            "config": {\n                "resultTable": "T1654611700631",\n                "path": "file://{filePath}/etltest.dolphin",\n                "serializer": "csv",\n                "options": {\n                "header":"true",\n                "delimiter":";"\n                },\n                "columnNames": ["name", "age"]\n            }\n        }\n    ],\n    "sinks": [\n        {\n            "name": "mongo",\n            "config": {\n                "sourceTable": "T1654611700631",\n                "uri": "mongodb://localhost:27017/test",\n                "database": "test",\n                "collection": "test",\n                "saveMode": "overwrite"\n            }\n        }\n    ]\n}\n')),(0,r.kt)("p",null,"Data read"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "sources": [\n        {\n            "name": "mongo",\n            "type": "source",\n            "config": {\n                "resultTable": "T1654611700631",\n                "uri": "mongodb://localhost:27017/test",\n                "database": "test",\n                "collection": "test"\n            }\n        }\n    ],\n    "sinks": [\n        {\n            "name": "file",\n            "config": {\n                "sourceTable": "T1654611700631",\n                "path": "file://{filePath}/json",\n                "saveMode": "overwrite",\n                "serializer": "json"\n            }\n        }\n    ]\n}\n')))}d.isMDXComponent=!0}}]);